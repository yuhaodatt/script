
local Vehicle = workspace['Cars']:FindFirstChild(game.Players.LocalPlayer.Name)
local VirtualInputManager = game:GetService("VirtualInputManager")
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "🚗 Drive World Script ",
   LoadingTitle = "🤖 Ultra Hub",
   LoadingSubtitle = "S1",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Ultra Hub 1 "
   },
   Discord = {
      Enabled = false,
      Invite = "https://discord.gg/ZAcNw4yQVR", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = false -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Drive World Script | Key 🔑",
      Subtitle = "Copy and Paste Link 🎮",
      Note = "测试",
      FileName = "Ultra Hub", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/VUeSZXAj"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
local MainTab = Window:CreateTab("🏠 Home", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")
Rayfield:Notify({
   Title = "You executed the script",
   Content = "Ultra GUI",
   Duration = 5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

function GetCar()
    for __,v in next, workspace['Cars']:GetChildren() do
        if tostring(v.Owner.Value) == game.Players.LocalPlayer.Name then
            return v
        end
    end
end
function AutoFarm(Enabled)
  shared.AutoFarm = Enabled
  while task.wait() and shared.AutoFarm do
    GetCar():PivotTo(CFrame.new(-3011.21924, -1.09442377, 884.348572, 0.999615967, 0.000473333028, -0.0277064797, -0.000564757967, 0.999994397, -0.00329203531, 0.027704766, 0.00330641866, 0.999610662))
    local function Hold(keyCode, time)
        VirtualInputManager      :SendKeyEvent(true, keyCode, false, game)
        task.wait(time)
        VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
    end
    Hold("W", 2)
    end
end
MainTab:CreateToggle({
    Name = "Auto Farm",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        AutoFarm(Value)
    end,
})
local MainTab = Window:CreateTab("💵 Useful", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Second")
MainTab:CreateToggle({
   Name = "Hide Name",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)      
local new_name = "Name"
local new_id = 104867
local clear_avatar = true
local flush_body_colors = true
local rename_instances = false
local change_id = false
local deep_scan = true
local filter_httpget = { 
    enabled = false,
    result = true,
    request = true
}

local Players = assert(assert(game, "game missing?"):FindService("Players") or game:GetService("Players"), "Players missing?")
local LocalPlayer = assert(Players.LocalPlayer, "LocalPlayer missing?")
local CoreGui = game:FindService("CoreGui") or game:GetService("CoreGui")
local PlayerGui = assert(LocalPlayer:FindFirstChild("PlayerGui"), "PlayerGui mising?")
local RunService = assert(game:FindService("RunService") or game:GetService("RunService"), "RunService missing?")
local replaces_str = {
    Players.LocalPlayer.Name
}
local replaces_num = {
    tostring(Players.LocalPlayer.UserId)
}
new_name, new_id = tostring(new_name), tostring(new_id)
local function casepatt(pattern)
    return string.gsub(pattern, "(%%?)(.)", function(percent, letter)
        if percent ~= "" or not string.match(letter, "%a") then
            return percent .. letter
        else
            return string.format("[%s%s]", string.lower(letter), string.upper(letter))
        end
    end)
end
function replace(item, fast)
    for replacewith, data in pairs({
        [new_name] = replaces_str,
        [new_id] = replaces_num
    }) do
        if not fast then
            RunService.RenderStepped:Wait()
        end
        for _, v in pairs(data) do
            if not fast then
                RunService.RenderStepped:Wait()
            end
            for _, t in pairs({
                "Text",
                "Message",
                "ToolTip",
                "Value"
            }) do
                pcall(function()
                    if string.find(item[t], v, nil, true) then
                        item[t] = string.gsub(item[t], v, replacewith)
                    elseif string.find(item[t], string.lower(v), nil, true) then
                        item[t] = string.gsub(item[v], string.lower(v), string.lower(replacewith))
                    elseif string.find(item[t], string.upper(v), nil, true) then
                        item[t] = string.gsub(item[v], string.upper(v), string.upper(replacewith))
                    elseif string.find(string.lower(item[t]), string.lower(v), nil, true) then
                        item[t] = string.gsub(item[v], casepatt(v), replacewith)
                    end
                end)
                if not fast then
                    RunService.RenderStepped:Wait()
                end
            end
            if not fast then
                RunService.RenderStepped:Wait()
            end
            if rename_instances then
                pcall(function()
                    if string.find(item.Name, v, nil, true) then
                        item.Name = string.gsub(item.Name, v, replacewith)
                    elseif string.find(item.Name, string.lower(v), nil, true) then
                        item.Name = string.gsub(item.Name, string.lower(v), string.lower(replacewith))
                    elseif string.find(item.Name, string.upper(v), nil, true) then
                        item.Name = string.gsub(item.Name, string.lower(v), string.upper(replacewith))
                    elseif string.find(string.lower(item.Name), string.lower(v), nil, true) then
                        item.Name = string.gsub(item.Name, casepatt(v), replacewith)
                    end
                end)
            end
        end
    end
end
shared.rep = replace
local function scan_and_replace(fast)
    local scan_que = {
        CoreGui:GetDescendants(),
        PlayerGui:GetDescendants(),
        workspace:GetDescendants()
    }
    local last_break = 0
    for _, items in pairs(scan_que) do
        if not fast then
            RunService.RenderStepped:Wait()
        end
        for _, gui in pairs(assert(type(items) == "table" and items, "scan_que does not hold a table")) do
            last_break = 1 + last_break
            if last_break >= 6000 then
                RunService.RenderStepped:Wait()
                last_break = 0
            end
            if not fast then
                RunService.RenderStepped:Wait()
            end
            replace(gui, fast)
        end
    end
    for _, obj in pairs(workspace:GetDescendants()) do
        if not fast then
            RunService.RenderStepped:Wait()
        end
        replace(obj)
    end
end
function fixchar(Character)
    if not Character then
        return 
    end
 wait(0.2)
    RunService.RenderStepped:Wait()
    if rename_instances then
        Character.Name = new_name
    end
 if clear_avatar then
     Players.LocalPlayer:ClearCharacterAppearance()
 end
    wait(0.1)
    if flush_body_colors then
        local bc = Character:FindFirstChildOfClass("BodyColors")
        if bc then
            for _, c in pairs({
                "HeadColor",
                "LeftArmColor",
                "LeftLegColor",
                "RightArmColor",
                "RightLegColor",
                "TorsoColor"
            }) do
                bc[c] = (typeof(bc[c]) == "BrickColor" and BrickColor.Random()) or bc[c]
            end
        else
            local h = Character:FindFirstChildOfClass("Humanoid")
            if h then
                for _, limb in pairs(Character:GetChildren()) do
                    if limb:IsA("BasePart") and pcall(h.GetLimb, h, limb) then
                        limb.BrickColor = BrickColor.Random()
                    end
                end
            end
        end
    end
end
fixchar(Players.LocalPlayer.Character)
Players.LocalPlayer.CharacterAppearanceLoaded:Connect(fixchar)
Players.LocalPlayer.CharacterAdded:Connect(fixchar)
if deep_scan then
    game.ItemChanged:Connect(function(obj, property)
        if not rename_instances and "Name" == property then
            return 
        end
        local s, v = pcall(function()
            return obj[property]
        end)
        if s then
            if "string" == type(v) then
                for _, c in pairs(replaces_str) do
                    RunService.RenderStepped:Wait()
                    if string.find(obj[property], c, nil, true) then
                        obj[property] = string.gsub(tostring(obj[property] or v), c, new_name)
                    elseif string.find(obj[property], string.lower(c)) then
                        obj[property] = string.gsub(tostring(obj[property] or v), string.lower(c), string.lower(new_name))
                    elseif string.find(obj[property], string.upper(c), nil, true) then
                        obj[property] = string.gsub(tostring(obj[property] or v), string.upper(c), string.upper(new_name))
                    elseif string.find(string.upper(obj[property]), string.upper(c), nil, true) then
                        obj[property] = string.gsub(tostring(obj[property] or v), casepatt(c), new_name)
                    end
                end
                RunService.RenderStepped:Wait()
                for _, c in pairs(replaces_num) do
                    RunService.RenderStepped:Wait()
                    if string.find(obj[property], new_id) then
                        obj[property] = string.gsub(tostring(obj[property] or v), c, new_id)
                    end
                end
            elseif "number" == type(v) then
                v = tostring(obj[property] or v)
                for _, c in pairs(replaces_num) do
                    RunService.RenderStepped:Wait()
                    if string.find(v, c) then
                        obj[property] = tonumber(tonumber(string.gsub(v, c, new_id) or obj[property]) or obj[property])
                    end
                end
            end
        end
    end)
    CoreGui.DescendantAdded:Connect(replace)
    PlayerGui.DescendantAdded:Connect(replace)
end
local function filterstr(s)
    for _, data in pairs({
        [new_name] = replaces_str,
        [new_id] = replaces_num
    }) do
        for c, v in pairs(data) do
            if string.find(s, v, nil, true) then
                s = string.gsub(s, v, c)
            elseif string.find(s, string.lower(v), nil, true) then
                s = string.gsub(s, string.lower(v), string.lower(c))
            elseif string.find(s, string.upper(v), nil, true) then
                s = string.gsub(s, string.upper(v), string.upper(c))
            elseif string.find(string.upper(s), string.upper(v), nil, true) then
                s = string.gsub(s, casepatt(v), c)
            end
        end
    end
    return s
end
if filter_httpget.enabled and type(hookfunc or hookfunction or detour_function) == "function" then
    local hget
    hget = assert(hookfunction or hookfunc or detour_function, "Hook function required for filter_httpget")(assert(game.HttpGet, "HttpGet required for filter_httpget"), function(shelf, u, ...)
        if filter_httpget.request then
            local x, e = pcall(filterstr, u)
            if x and e then
                u = e
            end
        end
        if filter_httpget.result then
            local result = hget(shelf, u, ...)
            local x, e = pcall(filterstr, result)
            if x and e then
                return e
            end
        end
        return hget(shelf, u, ...)
    end)
end
scan_and_replace(true)
while wait(1) do
    if rename_instances then
        Players.LocalPlayer.Name = new_name
        if Players.LocalPlayer.Character then
            Players.LocalPlayer.Character.Name = new_name
        end
    end
    if change_id then
        Players.LocalPlayer.UserId = tonumber(tonumber(new_id or 1) or 1)
    end
    scan_and_replace()
end
   end,
})
MainTab:CreateToggle({
   Name = "Speed",
   CurrentValue = false,
   Flag = "Toggle3", 
   Callback = function(Value)
    local uis = game:GetService("UserInputService")
local iswpressed = false
local uis = game:GetService("UserInputService")
local iswpressed = false
uis.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W then
        iswpressed = true
        while iswpressed do
            for _,v in pairs(workspace.Cars:GetChildren()) do
                if tostring(v.Owner.Value) == game.Players.LocalPlayer.Name then
                    v.Main.Velocity += v.Main.CFrame.LookVector * Vector3.new(2,0,2) - Vector3.new(0,2,0)
                end
            end
            wait()
        end
    end
end)
uis.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W then
        iswpressed = false
    end
end)
        end,
    })
local MainTab = Window:CreateTab("👌 Other", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Third")
MainTab:CreateToggle({
   Name = "INF Fly",
   CurrentValue = false,
   Flag = "Toggle4", 
   Callback = function(Value)
    loadstring(game:HttpGet('https://pastebin.com/raw/YSL3xKYU'))()
        end,
    })
MainTab:CreateToggle({
   Name = "INF Jump",
   CurrentValue = false,
   Flag = "Toggle5", 
   Callback = function(Value)
            _G.infinjump = not _G.infinjump
if _G.infinJumpStarted == nil then
	--Ensures this only runs once to save resources
	_G.infinJumpStarted = true
	
	--Notifies readiness
	game.StarterGui:SetCore("SendNotification", {Title="Youtube Hub"; Text="Infinite Jump Activated!"; Duration=5;})
	--The actual infinite jump
	local plr = game:GetService('Players').LocalPlayer
	local m = plr:GetMouse()
	m.KeyDown:connect(function(k)
		if _G.infinjump then
			if k:byte() == 32 then
			humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
			humanoid:ChangeState('Jumping')
			wait()
			humanoid:ChangeState('Seated')
			end
		end
	end)
end
   end,
})
MainTab:CreateSlider({
   Name = "WalkSpeed",
   Range = {1, 350},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "sliderws", 
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})
